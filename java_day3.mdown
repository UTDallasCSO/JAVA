### Day 3
* [Introducing Classes, Objects and Methods](#introducing-classes-objects-and-methods)

##### Introducing Classes, Objects and Methods
We have been using classes since the beginning of the course. Everything in java is class based so we didn't really have a choice otherwise. Here we will define a class, understand what it actually means and use some of the powerful features that make a java class useful.

The basic syntax of a class is:
```java
class Classname{
    // Declare instance variables.
    type varName; // & so on...

    // Declare Methods
    type method1(parameters){
        // body of the method here
    }
}
```
Although you won't get an error if you do otherwise, one class should ideally define one and only one logical entity.
Suppose you were writing a program of your favorite video game. You have a type of character called `warrior` and every warrior has a `weapon`
```java
// This is a bad design. Why?
class Game{
    String warrior_name;
    String warrior_weapon;

    public void walk(int s){
        // Make the warrior walk forward by s steps
    }

    public void weaponBreaks(){
        // If the damage to the weapon is too high, it breaks
    }
}
```
 This is a bad design for the Game class. Typically in this case, you must have 3 different classes. Game, Warrior and Weapon. The Game class will simply have an instance of the Warrior class and Weapon class.

 So the point to note down here is that a well designed class groups logically connected information together.

 Q: Will the `main()` method be a member of every class that we write?
 A: No. For classes like `warrior` or `weapon` that do not have meaning on their own - i.e. basically if the program is unlikely to start execution from those classes, need not have a main method.

```java
import java.util.*;

class Vehicle{
    // Member variables
    int range;
    String color;
    int num_of_wheels;
    int mpg;

    // Member function
    void getRange(){
        System.out.println(range);
    }
    void setRange(int newRange){
        range = newRange;
    }

}
class Solution{
    Vehicle mustang = new Vehicle();

    public static void main(String[] args){
        Solution latest = new Solution();
        latest.mustang.setRange(1000);
        latest.mustang.getRange();
    }
}
```
A new `.class` file will be created for each of the classes in this code.

##### Constructors
In the previous example we had to explicitly set each of the values of the class variables manually by accessing the setter methods. This is never done in a professional environment. What if you forget to set the fields? Professionally something called as the constructor is used. Think of it as a set of instructions or codes that are executed when a new object of that class is created.
A constructor:
* ...initializes an object when it is created.
* ...has the same name as the class
* ...has a similar syntax to a method BUT - they have no return type.
* ...is present and is executed whether or not you explicitly define one. If you don't define a constructor, Java will provide a default constructor that initializes values to their defaults.

```Java
// A simple constructor
class MyClass{
    int x;

    // Constructor
    MyClass(){
        x = 10;
    }
}
class consDemo{
    public static void main(String[] args){
        MyClass example1 = new MyClass(); // when Java encounters the word 'new', the compiler is called.
        System.out.println("Value: "+example1.x);
    }
}
```
What if you wanted to assign a specific value to the variable x?
Simple:

```java
// After creating the object, change its value;
MyClass example1 = new MyClass();
example1.x = 20;
```

But doing it this way is wasteful. We needlessly assign `10` to the variable x when it is declared. The solution to this problem is a `parametrized constructor`

```java
class MyClass{
    int x;

    MyClass(int value){
        x = value;
    }
}
```
We can optionally provide a way to set the value of the variable according to the value that we send to the `new` object of the class.

##### The `this` keyword
When a method is called, it is automatically passed an implicit argument that is a reference to the invoking object. This reference is called `this`

`this` has some important uses. For example, in Java, the parameters that you accept for a parametrized constructors can have the same variable names that the member variables that they represent. So in the above example,, instead of `value` we could have named the variable as `int x` but then the subsequent assignment of the variable to the member variable would have to be `this.x = x;` instead of just `x = value;`

What is the point of this you may ask?
> There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.

Jokes aside, in large and complex codes, it becomes difficult to come up with new variable names for use as member variable, the constructor parameters and using the main method. At such times, it is cleaner and easier to use the same name for a given variable everywhere it is used. `this` makes `this` useful!

##### Access specifiers.
Access specifiers in Java:
* public
* private
* default (When no access specifier is specified, it is `default`)
* protected

Ordering : Least restrictive to most restrictive:

> public > protected > package-private > private

What happens unless a member method or variable is not declared:
1. `public`: If not declared as public, this member method or variable cannot be accessed outside the class where it is declared. Usually, member variables are declared `private` instead of public and access to them is granted through `getter` and `setter` methods to prevent accidental modification.
2. `private`: If not declared private, the default access is granted i.e. access is allowed within the same package. Variables that are declared private can be accessed outside the class if public getter methods are present in the class. Using the `private` modifier is the main way that an object encapsulates itself and hide data from the outside world.
3. `default`: Like we've said above, default access is assigned when no access specifier is mentioned. This means different things in different contexts. A `variable` or `method` declared without any access control modifier is available to any other `class` in the same `package`. The fields in an `interface` are implicitly `public static final` and the `methods` in an `interface` are by default `public`.
4. `protected`: `Variables`, `methods` and `constructors` which are declared `protected` in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members' class. NOTE : The protected access modifier cannot be applied to `class` and `interfaces`. Methods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.

Notes:

* Methods declared `public` in a superclass also must be `public` in all subclasses.
* Methods declared `protected` in a superclass must either be `protected` or `public` in subclasses; they cannot be `private`.
* Methods declared `private` are not inherited at all, so there is no rule for them.
